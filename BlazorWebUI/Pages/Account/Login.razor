@layout LoginLayout;
@page "/account/login"
@using Application.Features.UserAccountFeatures.Commands


<PageTitle>Additional Features </PageTitle>
@inject IMediator Mediator;
@inject NavigationManager NavManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>Additional Features </PageTitle>


<div class="hold-transition login-page">
    <div class="login-box">
        <!-- /.login-logo -->
        <div class="card card-outline card-primary">
            <div class="card-header text-center">
                <a href="../../index2.html" class="h1"><b>Admin</b>LTE</a>
            </div>
            <div class="card-body">
                <p class="login-box-msg">Sign in to start your session</p>

                <EditForm OnSubmit="@HandleLogin" EditContext="@editContext">
                    <DataAnnotationsValidator />
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Email" @bind-value="login.Username">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-envelope"></span>
                            </div>
                        </div>
                        <ValidationMessage For="@(() => login.Username)" />
                    </div>
                    <div class="input-group mb-3">
                        <input type="password" class="form-control" placeholder="Password" @bind-value="login.Password">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-lock"></span>
                            </div>
                        </div>
                        <ValidationMessage For="@(() => login.Password)" />
                    </div>
                    <div class="row">
                        <div class="col-8">
                            <div class="icheck-primary">
                                <input type="checkbox" id="remember">
                                <label for="remember">
                                    Remember Me
                                </label>
                            </div>
                        </div>
                        <!-- /.col -->
                        <div class="col-4">
                            <button type="submit" class="btn btn-primary btn-block">Sign In</button>
                        </div>
                        <!-- /.col -->
                    </div>
                </EditForm>

                <div class="social-auth-links text-center mt-2 mb-3">
                    <a href="#" class="btn btn-block btn-primary">
                        <i class="fab fa-facebook mr-2"></i> Sign in using Facebook
                    </a>
                    <a href="#" class="btn btn-block btn-danger">
                        <i class="fab fa-google-plus mr-2"></i> Sign in using Google+
                    </a>
                </div>
                <!-- /.social-auth-links -->

                <p class="mb-1">
                    <a href="forgot-password.html">I forgot my password</a>
                </p>
                <p class="mb-0">
                    <a href="register.html" class="text-center">Register a new membership</a>
                </p>
            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->
    </div>
</div>
@code {
    private LoginCommand login = new();
    private EditContext? editContext;
    private JWTToken? token;
    protected override async Task OnInitializedAsync()
    {
        editContext = new(login);
        await Task.CompletedTask;
    }
    private async Task HandleLogin()
    {
        if (editContext != null && editContext.Validate())
        {
            BaseModel? obj = await Mediator.Send(login);
            token = (JWTToken)obj.Data;
            await Task.CompletedTask;
            if (token == null)
                NavManager.NavigateTo("account/login");

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                //_authMessage = $"{user.Identity.Name} is authenticated.";
                //_claims = user.Claims;
                //_surnameMessage =
                //    $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
            }
            else
            {
               // _authMessage = "The user is NOT authenticated.";
            }
            NavManager.NavigateTo("/");
        }
        else
        {
            //Logger.LogInformation("HandleSubmit called: Form is INVALID");
        }
    }
}
